/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/9.0.0/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application
    
    // Code quality plugins
    id("checkstyle")
    id("pmd")
    id("com.github.spotbugs") version "6.0.26"
    id("jacoco")
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)
    testImplementation("org.mockito:mockito-core:5.14.2")
    testImplementation("org.mockito:mockito-junit-jupiter:5.14.2")
    testImplementation("org.testcontainers:junit-jupiter:1.20.4")
    testImplementation("org.testcontainers:postgresql:1.20.4")
    testImplementation("org.assertj:assertj-core:3.26.3")

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // rome
    implementation("com.rometools:rome:1.18.0")

    // slf4j
    implementation("org.slf4j:slf4j-simple:2.0.12")

    // This dependency is used by the application.
    implementation(libs.guava)

    // Database
    implementation("org.postgresql:postgresql:42.7.2")
    implementation("org.hibernate:hibernate-core:6.4.1.Final")
    implementation("jakarta.persistence:jakarta.persistence-api:3.1.0")
    implementation("com.zaxxer:HikariCP:5.0.1")
    
    // AWS Lambda Core
    implementation("com.amazonaws:aws-lambda-java-core:1.2.3")
    implementation("com.amazonaws:aws-lambda-java-events:3.11.4")
    
    // AWS SDK for Secrets Manager
    implementation("software.amazon.awssdk:secretsmanager:2.20.26")
    implementation("software.amazon.awssdk:regions:2.20.26")
    
    // JSON processing for secrets
    implementation("com.fasterxml.jackson.core:jackson-databind:2.15.2")
    
    // SpotBugs annotations
    compileOnly("com.github.spotbugs:spotbugs-annotations:4.8.6")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "rssfetcher.batch.RssBatchProcessor"
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

tasks.jar {
    manifest {
        attributes("Main-Class" to "rssfetcher.batch.RssBatchProcessor")
    }
    from(configurations.runtimeClasspath.get().map { if (it.isDirectory) it else zipTree(it) })
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// JaCoCo configuration
jacoco {
    toolVersion = "0.8.12"
}

tasks.jacocoTestReport {
    dependsOn(tasks.test)
    reports {
        xml.required.set(true)
        html.required.set(true)
        csv.required.set(false)
    }
    finalizedBy(tasks.jacocoTestCoverageVerification)
}

tasks.jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = "0.10".toBigDecimal() // Temporarily reduced for initial setup
            }
        }
    }
}

// Checkstyle configuration
checkstyle {
    toolVersion = "10.20.1"
    configFile = file("../../../config/checkstyle/checkstyle.xml")
}

// PMD configuration
pmd {
    toolVersion = "7.8.0"
    ruleSetFiles = files("../../../config/pmd/pmd-ruleset.xml")
}

// SpotBugs configuration
spotbugs {
    toolVersion = "4.8.6"
    effort = com.github.spotbugs.snom.Effort.MAX
    reportLevel = com.github.spotbugs.snom.Confidence.MEDIUM
    excludeFilter = file("../../../config/spotbugs/spotbugs-exclude.xml")
}

tasks.spotbugsMain {
    reports.create("html") {
        required.set(true)
        outputLocation.set(layout.buildDirectory.file("reports/spotbugs/main.html"))
    }
    reports.create("xml") {
        required.set(true)
        outputLocation.set(layout.buildDirectory.file("reports/spotbugs/main.xml"))
    }
}

// Test task configuration
tasks.test {
    finalizedBy(tasks.jacocoTestReport)
}

// Quality check task
val qualityCheck by tasks.registering {
    dependsOn(tasks.test, tasks.checkstyleMain, tasks.pmdMain, tasks.spotbugsMain)
    group = "verification"
    description = "Runs all quality checks"
}

// Make check depend on qualityCheck
tasks.check {
    dependsOn(qualityCheck)
}
