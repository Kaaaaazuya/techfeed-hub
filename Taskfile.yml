version: '3'

vars:
  PROJECT_NAME: techfeed-hub

tasks:
  default:
    desc: Show available tasks
    cmds:
      - task --list

  # Database tasks
  db-up:
    desc: Start database services (PostgreSQL and Redis)
    cmds:
      - docker-compose up -d postgres redis

  db-down:
    desc: Stop database services
    cmds:
      - docker-compose down

  db-restart:
    desc: Restart database services
    cmds:
      - task: db-down
      - task: db-up

  db-status:
    desc: Check database services status
    cmds:
      - docker-compose ps postgres redis

  db-logs:
    desc: Show database logs
    cmds:
      - docker-compose logs -f postgres redis

  db-logs-postgres:
    desc: Show PostgreSQL logs only
    cmds:
      - docker-compose logs -f postgres

  db-logs-redis:
    desc: Show Redis logs only
    cmds:
      - docker-compose logs -f redis

  # Database management
  db-shell-postgres:
    desc: Connect to PostgreSQL shell
    cmds:
      - docker-compose exec postgres psql -U techfeed_user -d techfeed_hub

  db-shell-redis:
    desc: Connect to Redis CLI
    cmds:
      - docker-compose exec redis redis-cli

  # API Server operations
  api-build:
    desc: Build API server Docker image
    cmds:
      - docker-compose build api-server

  api-up:
    desc: Start API server with database
    deps: [db-up]
    cmds:
      - docker-compose up -d api-server

  api-down:
    desc: Stop API server
    cmds:
      - docker-compose stop api-server

  api-logs:
    desc: Show API server logs
    cmds:
      - docker-compose logs -f api-server

  api-test-endpoints:
    desc: Test API endpoints
    deps: [api-up]
    cmds:
      - sleep 10
      - curl -s http://localhost:8080/actuator/health | jq .
      - curl -s "http://localhost:8080/api/v1/articles?page=0&size=5" | jq .

  # API Server development tasks
  api-build:
    desc: Build API Server with Gradle
    dir: apps/api-server
    cmds:
      - ./gradlew build

  api-test:
    desc: Run API Server unit tests
    dir: apps/api-server
    cmds:
      - ./gradlew test

  api-quick-check:
    desc: "Run quick quality check (tests + coverage)"
    dir: apps/api-server
    cmds:
      - ./gradlew test jacocoTestReport

  api-quality-check:
    desc: Run all quality checks for API Server
    dir: apps/api-server
    cmds:
      - ./gradlew clean test jacocoTestReport checkstyleMain pmdMain spotbugsMain

  api-coverage:
    desc: Generate API Server test coverage report
    dir: apps/api-server
    cmds:
      - ./gradlew jacocoTestReport
      - echo "Coverage report available at apps/api-server/build/reports/jacoco/test/html/index.html"

  # RSS Fetcher batch operations
  rss-batch-today:
    desc: Run RSS batch processing for today using Docker
    deps: [db-up]
    cmds:
      - docker-compose --profile batch run --rm rss-fetcher

  rss-batch-date:
    desc: Run RSS batch processing for specific date using Docker
    deps: [db-up]
    cmds:
      - docker-compose --profile batch run --rm rss-fetcher {{.CLI_ARGS}}

  rss-batch-all:
    desc: Run RSS batch processing for all articles using Docker
    deps: [db-up]
    cmds:
      - docker-compose --profile batch run --rm rss-fetcher all

  rss-build:
    desc: Build RSS fetcher Docker image
    cmds:
      - docker-compose build rss-fetcher

  # RSS Fetcher development operations
  rss-test:
    desc: Run RSS fetcher unit tests
    dir: apps/rss-fetcher
    cmds:
      - ./gradlew test --no-daemon

  rss-test-watch:
    desc: Run RSS fetcher tests in continuous mode
    dir: apps/rss-fetcher
    cmds:
      - ./gradlew test --continuous --no-daemon

  rss-coverage:
    desc: Generate RSS fetcher test coverage report
    dir: apps/rss-fetcher
    cmds:
      - ./gradlew jacocoTestReport --no-daemon
      - echo 'Coverage report generated at apps/rss-fetcher/app/build/reports/jacoco/test/html/index.html'

  rss-lint:
    desc: Run RSS fetcher static analysis (Checkstyle, PMD, SpotBugs)
    dir: apps/rss-fetcher
    cmds:
      - ./gradlew checkstyleMain pmdMain spotbugsMain --no-daemon --continue
      - echo 'Checkstyle report at apps/rss-fetcher/app/build/reports/checkstyle/main.html'
      - echo 'PMD report at apps/rss-fetcher/app/build/reports/pmd/main.html'
      - echo 'SpotBugs report at apps/rss-fetcher/app/build/reports/spotbugs/main.html'

  rss-quality-check:
    desc: Run all RSS fetcher quality checks (tests + static analysis)
    dir: apps/rss-fetcher
    cmds:
      - ./gradlew qualityCheck --no-daemon --continue
      - echo 'All quality reports generated in apps/rss-fetcher/app/build/reports/'

  rss-quick-check:
    desc: Run RSS fetcher quick quality check (tests + coverage only)
    dir: apps/rss-fetcher
    cmds:
      - ./gradlew test jacocoTestReport --no-daemon
      - echo 'Test results and coverage report generated'
      - echo 'Test report at apps/rss-fetcher/app/build/reports/tests/test/index.html'
      - echo 'Coverage report at apps/rss-fetcher/app/build/reports/jacoco/test/html/index.html'

  rss-clean:
    desc: Clean RSS fetcher build artifacts
    dir: apps/rss-fetcher
    cmds:
      - ./gradlew clean --no-daemon

  rss-build-jar:
    desc: Build RSS fetcher standalone JAR
    dir: apps/rss-fetcher
    cmds:
      - ./gradlew build --no-daemon

  rss-run-local:
    desc: Run RSS fetcher locally (requires database)
    dir: apps/rss-fetcher
    deps: [db-up]
    cmds:
      - ./gradlew run --no-daemon

  # Frontend operations
  frontend-build:
    desc: Build frontend Docker image
    cmds:
      - docker-compose build frontend

  frontend-up:
    desc: Start frontend with API server
    deps: [api-up]
    cmds:
      - docker-compose up -d frontend

  frontend-down:
    desc: Stop frontend
    cmds:
      - docker-compose stop frontend

  frontend-logs:
    desc: Show frontend logs
    cmds:
      - docker-compose logs -f frontend

  frontend-dev:
    desc: Run frontend in development mode locally
    dir: apps/frontend
    cmds:
      - npm run dev

  frontend-install:
    desc: Install frontend dependencies
    dir: apps/frontend
    cmds:
      - npm install

  frontend-lint:
    desc: Run frontend linting
    dir: apps/frontend
    cmds:
      - npm run lint

  frontend-format:
    desc: Format frontend code
    dir: apps/frontend
    cmds:
      - npm run format

  frontend-format-check:
    desc: Check frontend code formatting
    dir: apps/frontend
    cmds:
      - npm run format:check

  frontend-build-static:
    desc: Build frontend for static export (SPA)
    dir: apps/frontend
    cmds:
      - npm run build:static

  frontend-serve-static:
    desc: Serve static frontend build locally
    dir: apps/frontend
    cmds:
      - npm run serve:static

  frontend-analyze:
    desc: Analyze frontend bundle size
    dir: apps/frontend
    cmds:
      - npm run analyze

  frontend-test-build:
    desc: Test static build and serve locally
    deps: [frontend-build-static]
    dir: apps/frontend
    cmds:
      - echo "Frontend built successfully. Testing static serve..."
      - timeout 10s npm run serve:static || echo "Static server test completed"

  # CDK Infrastructure operations
  cdk-install:
    desc: Install CDK dependencies
    dir: infra
    cmds:
      - npm install

  cdk-build:
    desc: Build CDK project
    dir: infra
    cmds:
      - npm run build

  cdk-test:
    desc: Run all CDK tests
    dir: infra
    cmds:
      - npm test

  cdk-test-unit:
    desc: Run CDK unit tests only
    dir: infra
    cmds:
      - npx jest test/infra.test.ts

  cdk-test-integration:
    desc: Run CDK integration tests only
    dir: infra
    cmds:
      - npx jest test/techfeed-stack.integration.test.ts

  cdk-test-watch:
    desc: Run CDK tests in watch mode
    dir: infra
    cmds:
      - npx jest --watch

  cdk-diff:
    desc: Show CDK deployment differences
    dir: infra
    cmds:
      - npm run cdk diff

  cdk-synth:
    desc: Synthesize CDK templates
    dir: infra
    cmds:
      - npm run cdk synth

  cdk-deploy:
    desc: Deploy CDK stack (requires AWS credentials)
    dir: infra
    deps: [cdk-test-unit]
    cmds:
      - npm run cdk deploy

  cdk-destroy:
    desc: Destroy CDK stack (requires AWS credentials)
    dir: infra
    cmds:
      - npm run cdk destroy

  # Full stack operations
  up:
    desc: Start all services
    cmds:
      - docker-compose up -d

  down:
    desc: Stop all services
    cmds:
      - docker-compose down

  restart:
    desc: Restart all services
    cmds:
      - task: down
      - task: up

  status:
    desc: Check status of all services
    cmds:
      - docker-compose ps

  logs:
    desc: Show logs for all services
    cmds:
      - docker-compose logs -f

  help:
    desc: Show detailed help for all tasks
    cmds:
      - |
        echo "TechFeed Hub Task Management:"
        echo ""
        echo "Database Services:"
        echo "  task db-up       - Start PostgreSQL and Redis"
        echo "  task db-down     - Stop database services"
        echo "  task db-restart  - Restart database services"
        echo "  task db-status   - Check database status"
        echo "  task db-logs     - Show database logs"
        echo ""
        echo "API Server:"
        echo "  task api-build       - Build API server Docker image"
        echo "  task api-up          - Start API server with database"
        echo "  task api-down        - Stop API server"
        echo "  task api-logs        - Show API server logs"
        echo "  task api-test        - Test API endpoints"
        echo ""
        echo "RSS Fetcher (Docker):"
        echo "  task rss-build       - Build RSS fetcher Docker image"
        echo "  task rss-batch-today - Process today's RSS articles"
        echo "  task rss-batch-all   - Process all RSS articles"
        echo "  task rss-batch-date -- 2025-08-07 - Process specific date"
        echo ""
        echo "RSS Fetcher (Development):"
        echo "  task rss-test           - Run unit tests"
        echo "  task rss-test-watch     - Run tests in continuous mode"
        echo "  task rss-coverage       - Generate test coverage report"
        echo "  task rss-quick-check    - Run quick quality check (tests + coverage)"
        echo "  task rss-lint           - Run static analysis (Checkstyle, PMD, SpotBugs)"
        echo "  task rss-quality-check  - Run all quality checks (tests + static analysis)"
        echo "  task rss-clean          - Clean build artifacts"
        echo "  task rss-build-jar      - Build standalone JAR"
        echo "  task rss-run-local      - Run RSS fetcher locally"
        echo ""
        echo "Frontend (Docker):"
        echo "  task frontend-build  - Build frontend Docker image"
        echo "  task frontend-up     - Start frontend with API server"
        echo "  task frontend-down   - Stop frontend"
        echo "  task frontend-logs   - Show frontend logs"
        echo ""
        echo "Frontend (Development):"
        echo "  task frontend-install      - Install frontend dependencies"
        echo "  task frontend-dev          - Run frontend in development mode"
        echo "  task frontend-build-static - Build for static export (SPA)"
        echo "  task frontend-serve-static - Serve static build locally"
        echo "  task frontend-lint         - Run linting"
        echo "  task frontend-format       - Format code"
        echo "  task frontend-analyze      - Analyze bundle size"
        echo "  task frontend-test-build   - Test static build locally"
        echo ""
        echo "CDK Infrastructure:"
        echo "  task cdk-install         - Install CDK dependencies"
        echo "  task cdk-build          - Build CDK project"
        echo "  task cdk-test           - Run all CDK tests"
        echo "  task cdk-test-unit      - Run CDK unit tests only"
        echo "  task cdk-test-integration - Run CDK integration tests only"
        echo "  task cdk-test-watch     - Run CDK tests in watch mode"
        echo "  task cdk-diff           - Show CDK deployment differences"
        echo "  task cdk-synth          - Synthesize CDK templates"
        echo "  task cdk-deploy         - Deploy CDK stack (with tests)"
        echo "  task cdk-destroy        - Destroy CDK stack"
        echo ""
        echo "Database Access:"
        echo "  task db-shell-postgres - Connect to PostgreSQL"
        echo "  task db-shell-redis    - Connect to Redis CLI"
        echo ""
        echo "Full Stack:"
        echo "  task up          - Start all services"
        echo "  task down        - Stop all services"
        echo "  task restart     - Restart all services"
        echo "  task status      - Check all services status"
        echo "  task logs        - Show all logs"